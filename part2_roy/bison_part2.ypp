/* C Definitions and declerations*/

%{
#include <stdio.h>
#include <iostream>
#include "part2_helpers.h"


void yyerror(const char*);
extern int yylex();
extern char* yytext;
extern int yylineno;


ParserNode* parseTree = NULL;

%}

/*token definitions and associatives*/
%token STR ID INTEGERNUM REALNUM 
%token SEMICOLON COLON
%token INT FLOAT VOID WRITE READ OPTIONAL WHILE DO RETURN
%right IF THEN
%right ELSE
%left COMMA
%right ASSIGN
%left OR
%left AND
%left RELOP
%left ADDOP
%left MULOP
%right NOT
%left OPENBRACKET_B CLOSEDBRACKET_B OPENBRACKET_A CLOSEDBRACKET_A


%%
/*rules*/

program: fdefs {$$ = makeNode("PROGRAM",NULL,$1); parseTree = $$;}
;

fdefs: fdefs func_def_api blk {$$ = makeNode("FDEFS",NULL,concatList($1, concatList($2, $3)));}
       | fdefs func_dec_api {$$ = makeNode("FDEFS",NULL,concatList($1,$2));}
       | /*epsilon*/ {$$ = makeNode("FDEFS",NULL,makeNode("EPSILON",NULL,NULL));}
;

func_dec_api: type ID OPENBRACKET_B CLOSEDBRACKET_B SEMICOLON {$$ = makeNode("FUNC_DEC_API",NULL,concatList($1,concatList($2, concatList($3, concatList($4, $5)))));}
              | type ID OPENBRACKET_B func_arglist CLOSEDBRACKET_B SEMICOLON {$$ = makeNode("FUNC_DEC_API",NULL,concatList($1,concatList($2,concatList($3, concatList($4, concatList($5, $6))))));}
              | type ID OPENBRACKET_B func_dec_arglist_opt CLOSEDBRACKET_B SEMICOLON {$$ = makeNode("FUNC_DEC_API",NULL,concatList($1,concatList($2,concatList($3, concatList($4, concatList($5, $6))))));}
	      | type ID OPENBRACKET_B func_arglist COMMA func_dec_arglist_opt CLOSEDBRACKET_B SEMICOLON {$$ = makeNode("FUNC_DEC_API",NULL,concatList($1, concatList($2, concatList($3,concatList($4,concatList($5, concatList($6, concatList($7, $8))))))));}
; 

func_dec_arglist_opt: func_dec_arglist_opt COMMA dcl_opt {$$ = makeNode("FUNC_DEC_ARGLIST_OPT",NULL,concatList($1,concatList($2,$3)));}
		     | dcl_opt {$$ = makeNode("FUNC_DEC_ARGLIST_OPT",NULL,$1);}
;

dcl_opt: ID COLON OPTIONAL type {$$ = makeNode("DCL_OPT",NULL,concatList($1,concatList($2,concatList($3,$4))));}
         | ID COLON dcl_opt {$$ = makeNode("DCL_OPT",NULL,concatList($1, concatList($2, $3)));}
;

func_def_api: type ID OPENBRACKET_B CLOSEDBRACKET_B {$$ = makeNode("FUNC_DEF_API",NULL,concatList($1,concatList($2,concatList($3,$4))));}
	      | type ID OPENBRACKET_B func_arglist CLOSEDBRACKET_B {$$ = makeNode("FUNC_DEF_API",NULL,concatList($1,concatList($2,concatList($3,concatList($4,$5)))));}
	      | type ID OPENBRACKET_B func_def_arglist_opt CLOSEDBRACKET_B {$$ = makeNode("FUNC_DEF_API",NULL,concatList($1,concatList($2,concatList($3,concatList($4,$5)))));}
              | type ID OPENBRACKET_B func_arglist COMMA func_def_arglist_opt CLOSEDBRACKET_B {$$ = makeNode("FUNC_DEF_API",NULL,concatList($1,concatList($2,concatList($3,concatList($4,concatList($5,concatList($6,$7)))))));}
;

func_def_arglist_opt: func_def_arglist_opt COMMA dcl_opt_val {$$ = makeNode("FUNC_DEF_ARGLIST_OPT",NULL,concatList($1,concatList($2,$3)));}
		      | dcl_opt_val {$$ = makeNode("FUNC_DEF_ARGLIST_OPT",NULL,$1);}
;

dcl_opt_val: ID ASSIGN num COLON OPTIONAL type {$$ = makeNode("DCL_OPT_VAL",NULL,concatList($1,concatList($2,concatList($3,concatList($4,concatList($5,$6))))));}
	     | ID ASSIGN num COMMA dcl_opt_val{$$ = makeNode("DCL_OPT_VAL",NULL,concatList($1,concatList($2,concatList($3,concatList($4,$5)))));}
;

func_arglist: func_arglist COMMA dcl {$$ = makeNode("FUNC_ARGLIST",NULL,concatList($1,concatList($2,$3)));}
	      | dcl {$$ = makeNode("FUNC_ARGLIST",NULL,$1);}
;


blk: OPENBRACKET_A stlist CLOSEDBRACKET_A {$$ = makeNode("BLK",NULL,concatList($1,concatList($2,$3)));}
;

dcl: ID COLON type {$$ = makeNode("DCL",NULL,concatList($1,concatList($2,$3)));}
     | ID COMMA dcl {$$ = makeNode("DCL",NULL,concatList($1,concatList($2,$3)));}
;

type: INT {$$ = makeNode("TYPE",NULL,$1);}
     | FLOAT {$$ = makeNode("TYPE",NULL,$1);}
     | VOID {$$ = makeNode("TYPE",NULL,$1);}
;

stlist: stlist stmt {$$ = makeNode("STLIST",NULL,concatList($1,$2));}
        | /*epsilon*/ {$$ = makeNode("STLIST",NULL,makeNode("EPSILON",NULL,NULL));}
;

stmt: dcl SEMICOLON {$$ = makeNode("STMT",NULL,concatList($1,$2));}
      | assn {$$ = makeNode("STMT",NULL,$1);}
      | exp SEMICOLON {$$ = makeNode("STMT",NULL,concatList($1,$2));}
      | cntrl {$$ = makeNode("STMT",NULL,$1);}
      | read {$$ = makeNode("STMT",NULL,$1);}
      | write {$$ = makeNode("STMT",NULL,$1);}
      | return {$$ = makeNode("STMT",NULL,$1);}
      | blk {$$ = makeNode("STMT",NULL,$1);}
;

return: RETURN exp SEMICOLON {$$ = makeNode("RETURN",NULL,concatList($1, concatList($2,$3)));}
       | RETURN SEMICOLON {$$ = makeNode("RETURN",NULL,concatList($1,$2));}
;

write: WRITE OPENBRACKET_B exp CLOSEDBRACKET_B SEMICOLON {$$ = makeNode("WRITE",NULL,concatList($1,concatList($2,concatList($3,concatList($4,$5)))));}
       | WRITE OPENBRACKET_B STR CLOSEDBRACKET_B SEMICOLON {$$ = makeNode("WRITE",NULL,concatList($1,concatList($2,concatList($3,concatList($4,$5)))));}
;
read: READ OPENBRACKET_B lval CLOSEDBRACKET_B SEMICOLON {$$ = makeNode("READ",NULL,concatList($1,concatList($2,concatList($3,concatList($4,$5)))));}
;

assn: lval ASSIGN exp SEMICOLON {$$ = makeNode("ASSN",NULL,concatList($1,concatList($2,concatList($3,$4))));}
;

lval:ID {$$ = makeNode("LVAL",NULL,$1);}
;

cntrl: IF bexp THEN stmt ELSE stmt {$$ = makeNode("CNTRL",NULL,concatList($1,concatList($2,concatList($3,concatList($4,concatList($5,$6))))));}
       | IF bexp THEN stmt {$$ = makeNode("CNTRL",NULL,concatList($1,concatList($2,concatList($3,$4))));}
       | WHILE bexp DO stmt {$$ = makeNode("CNTRL",NULL,concatList($1,concatList($2,concatList($3,$4))));}
;

bexp: bexp OR bexp {$$ = makeNode("BEXP",NULL,concatList($1, concatList($2,$3)));}
      | bexp AND bexp {$$ = makeNode("BEXP",NULL,concatList($1, concatList($2,$3)));}
      | NOT bexp {$$ = makeNode("BEXP",NULL,concatList($1,$2));}
      | exp RELOP exp {$$ = makeNode("BEXP",NULL,concatList($1, concatList($2,$3)));}
      | OPENBRACKET_B bexp CLOSEDBRACKET_B {$$ = makeNode("BEXP",NULL,concatList($1, concatList($2,$3)));}
;

exp: exp ADDOP exp {$$ = makeNode("EXP",NULL,concatList($1, concatList($2,$3)));}
     | exp MULOP exp {$$ = makeNode("EXP",NULL,concatList($1, concatList($2,$3)));}
     | OPENBRACKET_B exp CLOSEDBRACKET_B {$$ = makeNode("EXP",NULL,concatList($1, concatList($2,$3)));}
     | OPENBRACKET_B type CLOSEDBRACKET_B exp {$$ = makeNode("EXP",NULL,concatList($1,concatList($2,concatList($3,$4))));}
     | ID {$$ = makeNode("EXP",NULL,$1);};
     | num {$$ = makeNode("EXP",NULL,$1);};
     | call {$$ = makeNode("EXP",NULL,$1);};
;

num: INTEGERNUM {$$ = makeNode("NUM",NULL,$1);}
    | REALNUM{$$ = makeNode("NUM",NULL,$1);}
;

call: ID OPENBRACKET_B call_args CLOSEDBRACKET_B {$$ = makeNode("CALL",NULL,concatList($1,concatList($2,concatList($3,$4))));}
;

call_args: call_arglist {$$ = makeNode("CALL_ARGS",NULL,$1);}
           | /*epsilon*/ {$$ = makeNode("CALL_ARGS",NULL,makeNode("EPSILON",NULL,NULL));}
;
call_arglist: call_arglist COMMA exp {$$ = makeNode("CALL_ARGLIST",NULL,concatList($1,concatList($2,$3)));}
            | exp {$$ = makeNode("CALL_ARGLIST",NULL,$1);}
;







%%

void yyerror(const char*){
 printf("Syntax error: '%s' in line number %d\n",yytext,yylineno);
 exit(2);
}



